<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2017/18 Politecnico di Torino and others.

 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Apache License, Version 2.0
 which accompanies this distribution, and is available at
 http://www.apache.org/licenses/LICENSE-2.0
-->
<project name="Verigraph" default="generate-war" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  <description>
      Script for Verigraph
  </description>

  <property name="root.location" location="." />
  <!-- The location to be used for class files -->
  <property name="docker-grpc.dir" value="${root.location}/docker/gRPC" />
  <property name="docker-rest.dir" value="${root.location}/docker/REST" />
  <property name="cli.dir" value="${root.location}/VerigraphCLI" />
  <property name="src.dir" location="${root.location}/src" />
  <property name="gen.dir" location="${root.location}/gen-src" />
  <property name="war.dir" location="${root.location}/war" />
  <property name="grpc.dir" value="${src.dir}/it/polito/verigraph/grpc" />
  <property name="path.prefix" value="it/polito" />
  <property name="build.dir" location="${root.location}/build" />
  <property name="lib.dir" location="${root.location}/lib" />
  <property name="schemadir" location="${root.location}/schema" />
  <property name="schemafile" value="xml_components.xsd" />
  <property name="toscaschemadir" location="${root.location}/schema/tosca" />
  <property name="toscaschemafile" value="TOSCA-v1.0.xsd" />
  <property name="toscaverigraphschemafile" value="ToscaTypes_XMLconfig.xsd" />
  <property name="testfile" value="test.py" />
  <property name="target" value="1.8" />
  <property name="source" value="1.8" />
  <property name="gen-tomcat-service.dir" location="${root.location}/target" />
  <property name="resources.dir" location="${root.location}/webapp" />
  <property name="gen-war.dir" location="${root.location}/war" />
  <property name="jsonschemafolder.dir" location="${root.location}/jsonschema" />
  <property name="test.dir" location="${root.location}/tester" />
  <property name="iteration" value="1" />

  <path id="z3.classpath">
    <pathelement location="${lib.dir}/com.microsoft.z3.jar" />
  </path>


  <import file="tomcat-build.xml" />

  <target name="mvn-init" unless="compile.classpath" xmlns:artifact="urn:maven-artifact-ant">
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpath="lib/maven-ant-tasks-2.1.3.jar" />
    <condition property="maven.repo.local" value="${maven.repo.local}" else="${user.home}/.m2/repository">
      <isset property="maven.repo.local" />
    </condition>
    <echo>maven.repo.local=${maven.repo.local}</echo>
    <artifact:localRepository id="local.repository" path="${maven.repo.local}" />
    <artifact:pom file="pom.xml" id="maven.project" />
    <artifact:dependencies pathId="compile.classpath" filesetId="compile.fileset" useScope="compile">
      <pom refid="maven.project" />
      <localRepository refid="local.repository" />
    </artifact:dependencies>
    <artifact:dependencies pathId="test.classpath" filesetId="test.fileset" useScope="test">
      <pom refid="maven.project" />
      <localRepository refid="local.repository" />
    </artifact:dependencies>
    <artifact:dependencies pathId="runtime.classpath" filesetId="runtime.fileset" useScope="runtime">
      <pom refid="maven.project" />
      <localRepository refid="local.repository" />
    </artifact:dependencies>
    <artifact:dependencies pathId="build.classpath" filesetId="build.fileset">
      <pom refid="maven.project" />
      <localRepository refid="local.repository" />
    </artifact:dependencies>
  </target>


  <target name="init">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${gen-tomcat-service.dir}" />
    <mkdir dir="${gen-war.dir}" />
    <mkdir dir="${gen.dir}" />
    <mkdir dir="${lib.dir}" />
    <get dest="${lib.dir}">
      <url url="https://github.com/Z3Prover/z3/releases/download/z3-4.5.0/z3-4.5.0-x86-win.zip" />
      <url url="http://central.maven.org/maven2/org/apache/maven/maven-ant-tasks/2.1.3/maven-ant-tasks-2.1.3.jar" />
    </get>
    <unzip src="${lib.dir}/z3-4.5.0-x86-win.zip" dest="${lib.dir}" overwrite="true">
      <patternset>
        <include name="**/**/com.microsoft.z3.jar" />
      </patternset>
      <mapper type="flatten" />
    </unzip>
    <delete file="${lib.dir}/z3-4.5.0-x86-win.zip" />
  </target>


  <target name="chk-bindings">
    <uptodate property="generate-bindings.notRequired" targetfile="${gen.dir}/.flagfile">
      <srcresources>
        <fileset dir="${schemadir}" includes="${schemafile}" />
        <fileset dir="${toscaschemadir}" includes="${toscaschemafile}" />
        <fileset dir="${toscaschemadir}" includes="${toscaverigraphschemafile}" />
      </srcresources>
    </uptodate>
  </target>

  <target name="generate-bindings" unless="generate-bindings.notRequired" depends="init, chk-bindings" description="Create the value classes">
    <exec executable="xjc" failonerror="true">
      <arg line="-d ${gen.dir} -p it.polito.neo4j.jaxb ${schemadir}/${schemafile}" />
    </exec>
    <exec executable="xjc" failonerror="true">
      <arg line="-d ${gen.dir} -p it.polito.tosca.jaxb ${toscaschemadir}/${toscaschemafile}" />
    </exec>
    <mkdir dir="${root.location}/temp-gen" />
    <exec executable="xjc" failonerror="true">
      <arg line="-d ${root.location}/temp-gen -p it.polito.tosca.jaxb ${toscaschemadir}/${toscaverigraphschemafile}" />
    </exec>

    <copy toDir="${gen.dir}/it/polito/tosca/jaxb" overwrite="true">
      <file name="${root.location}/temp-gen/it/polito/tosca/jaxb/Configuration.java" />
    </copy>
    <delete dir="${root.location}/temp-gen" />

    <touch file="${gen.dir}/.flagfile" />
  </target>


  <!-- The target for compiling the Verigraph application -->
  <target name="build-service" depends="init, generate-bindings, mvn-init">
    <echo>Building verigraph (if needed)...</echo>
    <javac destdir="${build.dir}" debug="${debug}" debuglevel="${debuglevel}" source="${source}" target="${target}" includeantruntime="false">
      <classpath>
        <path id="compile.classpath" />
        <path id="z3.classpath" />
      </classpath>
      <src path="${src.dir}" />
      <src path="${gen.dir}" />
      <src path="${basedir}/gen-protobuf" />
      <include name="${path.prefix}/**/*.java" />
      <exclude name="main/proto/" />
    </javac>
    <echo>Done.</echo>
  </target>


  <macrodef name="war-exploded">
    <sequential>
      <copy toDir="${gen-tomcat-service.dir}" overwrite="true">
        <fileset dir="${resources.dir}" />
      </copy>
      <copy toDir="${gen-tomcat-service.dir}" overwrite="true">
        <fileset dir=".">
          <include name="server.properties" />
        </fileset>
      </copy>
      <!-- copy class files to WEB-INF/classes directory -->
      <copy toDir="${gen-tomcat-service.dir}/WEB-INF/classes" overwrite="true">
        <fileset dir="${build.dir}">
          <exclude name="verigraph.proto" />
          <exclude name="src/main/proto" />
        </fileset>
      </copy>
      <!-- copy jsonschema folder to WEB-INF/classes directory -->
      <copy toDir="${gen-tomcat-service.dir}/jsonschema" overwrite="true">
        <fileset dir="${jsonschemafolder.dir}" />
      </copy>
      <!-- copy lib files to WEB-INF/lib directory -->
      <copy toDir="${gen-tomcat-service.dir}/maven-lib" overwrite="true">
        <fileset refid="runtime.fileset">
        </fileset>
      </copy>
      <copy toDir="${gen-tomcat-service.dir}/WEB-INF/lib" overwrite="true" flatten="true">
        <fileset dir="${gen-tomcat-service.dir}/maven-lib">
          <include name="**/**/*.jar" />
        </fileset>
      </copy>
      <delete dir="${gen-tomcat-service.dir}/maven-lib" />

      <!-- Make the jar that includes only the classes needed for verigraph models -->
      <jar destfile="${gen-tomcat-service.dir}/WEB-INF/lib/mcnet.jar">
        <fileset dir="${build.dir}">
          <include name="it/polito/verigraph/mcnet/**/*.class" />
        </fileset>
      </jar>
      <!-- Copy the z3 library -->
      <copy toDir="${gen-tomcat-service.dir}/WEB-INF/lib" overwrite="true" flatten="true">
        <file name="${lib.dir}/com.microsoft.z3.jar" />
      </copy>
    </sequential>
  </macrodef>

  <target name="war-exploded" depends="build-service">
    <war-exploded />
  </target>

  <target name="generate-war" depends="war-exploded">
    <war destfile="${gen-war.dir}/${serviceName}.war" basedir="${gen-tomcat-service.dir}">
      <exclude name="protoc-dependencies/" />
      <exclude name="protoc-plugins/" />
      <exclude name="classes/" />
      <exclude />
    </war>
  </target>

  <target name="docker-rest-build" depends="generate-war">
    <delete file="${docker-rest.dir}/verigraph.war" />

    <copy file="${gen-war.dir}/verigraph.war" toDir="${docker-rest.dir}" />
  </target>

  <target name="docker-grpc-build" depends="build-service">
    <delete dir="${docker-grpc.dir}/service_lib" />
    <mkdir dir="${docker-grpc.dir}/service_lib" />

    <copy toDir="${docker-grpc.dir}/service_lib" flatten="true" overwrite="true">
      <fileset refid="runtime.fileset" />
    </copy>
    <copy file="${lib.dir}/com.microsoft.z3.jar" todir="${docker-grpc.dir}/service_lib" />

    <delete file="${docker-grpc.dir}/server.properties" />
    <delete dir="${docker-grpc.dir}/jsonschema" />
    <copy file="${root.location}/server.properties" todir="${docker-grpc.dir}" />
    <copydir src="${root.location}/jsonschema" dest="${docker-grpc.dir}/jsonschema" />

    <path id="jars.path">
      <fileset dir="${docker-grpc.dir}">
        <include name="service_lib/*.jar" />
      </fileset>
    </path>

    <pathconvert property="jars.mf" pathsep=" ">
      <path refid="jars.path" />
      <flattenmapper />
      <map from="" to="service_lib/" />
    </pathconvert>

    <delete file="${docker-grpc.dir}/service.jar"/>
    <jar destfile="${docker-grpc.dir}/service.jar">
      <manifest>
        <attribute name="Main-Class" value="it.polito.verigraph.grpc.server.Service"/>
        <attribute name="Class-Path" value="${jars.mf}"/>
      </manifest>
      <fileset dir="${root.location}/build"/>
    </jar>
  </target>


  <target name="build-cli-jar" depends="build-service">
    <delete dir="${cli.dir}" />
    <mkdir dir="${cli.dir}" />

    <copy toDir="${cli.dir}/service_lib" flatten="true" overwrite="true">
      <fileset refid="runtime.fileset" />
    </copy>
    <copy file="${src.dir}/it/polito/verigraph/tosca/README_CLI.txt" todir="${cli.dir}" />

    <path id="jars.path">
      <fileset dir="${cli.dir}">
        <include name="service_lib/*.jar" />
      </fileset>
    </path>

    <pathconvert property="jars.mf" pathsep=" ">
      <path refid="jars.path" />
      <flattenmapper />
      <map from="" to="service_lib/" />
    </pathconvert>

    <delete file="${cli.dir}/VerigraphCLI.jar"/>
    <jar destfile="${cli.dir}/VerigraphCLI.jar">
      <manifest>
        <attribute name="Main-Class" value="it.polito.verigraph.tosca.ToscaCLI"/>
        <attribute name="Class-Path" value="${jars.mf}"/>
      </manifest>
      <fileset dir="${root.location}/build"/>
    </jar>
  </target>

  <!-- launch test python test -->
  <target name="run-test">
    <exec dir="${test.dir}" executable="python">
      <arg value="${testfile}" />
      <arg value="-iteration " />
      <arg value="${iteration}" />
    </exec>
  </target>

  <!-- target for cleaning -->
  <target name="clean">
    <delete dir="${build.dir}" />
    <delete dir="${gen.dir}" />
    <delete dir="${gen-tomcat-service.dir}" />
    <delete dir="${war.dir}" />
    <delete dir="${lib.dir}" />
    <delete dir="${docker-grpc.dir}/service_lib" />
    <delete dir="${docker-grpc.dir}/jsonschema" />
    <delete file="${docker-grpc.dir}/server.properties" />
    <delete file="${docker-grpc.dir}/service.jar" />
    <delete file="${docker-rest.dir}/verigraph.war" />
    <delete dir="${cli.dir}" />
  </target>

</project>